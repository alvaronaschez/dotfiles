"       _
"__   _(_)_ __ ___  _ __ ___
"\ \ / / | '_ ` _ \| '__/ __|
" \ V /| | | | | | | | | (__
"(_)_/ |_|_| |_| |_|_|  \___|
"
"
" ':normal zr' to unfold everything
" ':normal zm' to fold everything again
" ':normal za' to toggle one fold
"
"


" GENERAL CONFIGURATION OPTIONS {{{
set nocompatible " use Vim settings, ragher than Vi settings
set hidden " use hidden buffers
"set nohidden " this is the default value
set autoread " automatically re-read files if unmodified inside vim
set clipboard=unnamedplus
" Make the escape key more responsive by decreasing the wait time for an
" escape sequence (e.g., arrow keys).
set ttimeout
set ttimeoutlen=50
"set timeoutlen=500
set exrc " use local .vimrc files
filetype plugin on
"}}}


" USER INTERFACE OPTIONS {{{
"colorscheme desert " use this colorscheme if not available colorscheme plugin
set number " show line numbers on the sidebar
set relativenumber " set line numbers relative to the line of the cursor
set cursorline " highlight the line currently under the cursor
set colorcolumn=80 " highlight 80th column
set wildmenu " display command line's tab autocomplete options as a menu
set noerrorbells " disable beep on errors
set visualbell " flash the screen instead of beeping on errors
set mouse=a
set background=dark " use colors that suit a dark background

set splitright
set splitbelow
set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
" }}}


" TEXT RENDERING OPTIONS {{{
set encoding=utf8
syntax on
set scrolloff=5
" set nowrap " don't wrap lines
set linebreak " wrap lines at convenient points
set list
set listchars=tab:→\ ,trail:·,extends:…,precedes:…,nbsp:•
set listchars+=eol:¬,space:·
"
" cursor style
" Set cursor style (DECSCUSR), VT520.
" 	0  ⇒  blinking block.
" 	1  ⇒  blinking block (default).
" 	2  ⇒  steady block.
" 	3  ⇒  blinking underline.
" 	4  ⇒  steady underline.
" 	5  ⇒  blinking bar, xterm.
" 	6  ⇒  steady bar, xterm
let &t_EI = "\e[2 q"  " Set cursor to a block in normal mode
let &t_SI = "\e[6 q"  " Set cursor to a vertical bar in insert mode
"}}}


" INDENTATION OPTIONS {{{
" see :h tabstop
filetype plugin indent on " enable indenting depending on file type
set autoindent " enable autoindenting
"set tabstop=8
"set softtabstop=4
"set shiftwidth=4
"set smarttab
"https://stackoverflow.com/questions/158968/changing-vim-indentation-behavior-by-file-type
augroup custom_indentation
	" :help autocmd-groups
	autocmd!
	" use ':normal za' to colapse and uncolapse folds
	autocmd Filetype vim setlocal shiftwidth=4 tabstop=4 noexpandtab 
\		foldmethod=marker "nofoldenable
	autocmd Filetype c setlocal shiftwidth=4 tabstop=4 noexpandtab
	autocmd Filetype python setlocal shiftwidth=4 softtabstop=4 expandtab
	autocmd Filetype javascript setlocal ts=2 sw=2 noet
augroup END
"}}}


" SEARCH OPTIONS {{{
set hlsearch
set incsearch
set ignorecase " ignore case when searchihng...
set smartcase " ...unless you type a capital
" This will look in the current directory for 'tags', and work up the tree
" towards root until one is found.
" From: http://stackoverflow.com/questions/563616/vim-and-ctags-tips-and-tricks
set tags=tags;/
"}}}


" REMAPPINGS {{{
nnoremap ; :
nnoremap : ;
" scroll down
nnoremap <down> <C-e>
" scroll up
nnoremap <up> <C-y>

" Yank to end of line
noremap Y y$

" leader
nnoremap <space> <nop>
let g:mapleader = "\<space>"
let g:maplocalleader = "\<space>"
" double tap esc to enter normal mode (inside terminal mode)
tnoremap <Esc><Esc> <C-\><C-N>
" open terminal in current window
"noremap <leader>T :ter ++curwin<CR>
" open terminal in new window
" noremap <leader>t :ter<CR>
" open terminal in new tab
noremap <leader>T :tab ter<CR>
" :ter to open new terminal in split window
" reload vim configuration
"nnoremap <silent> <Leader>r :so $MYVIMRC<CR> :nohls<cr><left>
nnoremap <silent> <Leader>. :so $MYVIMRC<CR> :nohls<cr><left>
" clear search
nnoremap <silent> <leader>/ :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
" windows
"nnoremap <leader>s :new<cr>
nnoremap <leader>s <C-w>n
nnoremap <leader>v :vnew<cr>
nnoremap <leader>h <C-w>h
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l
nnoremap <leader>H <C-w>H
nnoremap <leader>J <C-w>J
nnoremap <leader>K <C-w>K
nnoremap <leader>L <C-w>L

" tabs
"noremap <leader>t :tabnew<CR>
noremap <leader>t :tabe<CR>
" gt - go to next tab
nnoremap <leader>n gt
" gT - go to previous tab
nnoremap <leader>p gT
" gf - go to file under the cursor
" <C-w>gf - go to file under the cursor in a new tab
"}}}


" WORKAROUND TO MAKE SYSTEM CLIPBOARD WORK IN WAYLAND {{{
"https://github.com/vim/vim/issues/5157
if $XDG_SESSION_TYPE=='wayland'
	augroup wl-clipboard
	" :help autocmd-groups
		autocmd!
		autocmd FocusLost * :call system('wl-copy --trim-newline', @+)
		autocmd FocusGained * :let @+ = system('wl-paste -n')
	augroup END
endif

" }}}


" PLUGINS {{{
runtime ftplugin/man.vim

call plug#begin()

Plug 'chriskempson/base16-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'dense-analysis/ale'
Plug 'preservim/tagbar'
Plug 'liuchengxu/vim-which-key'
Plug 'cohama/lexima.vim' " modern auto-pairs
Plug 'luochen1990/rainbow'
Plug 'preservim/vim-indent-guides'
Plug 'mhinz/vim-signify'
Plug 'ludovicchabant/vim-gutentags'
Plug 'easymotion/vim-easymotion'
"Plug 'maralla/completor.vim'
"Plug 'lifepillar/vim-mucomplete'
"Plug 'ervandew/supertab'
" language specific
" C, C++
Plug 'xavierd/clang_complete'
Plug 'rhysd/vim-clang-format'
" Lisp
" https://susam.net/lisp-in-vim.html
Plug 'kovisoft/slimv'
"Plug 'preservim/nerdtree'
"Plug 'mhinz/vim-startify'


call plug#end()
"}}}


" PLUGIN SETTINGS {{{
"let g:deoplete#enable_at_startup = 1

"let g:ale_c_parse_makefile = 1
"let g:ale_linters = {'c': ['gcc']}

" airline
let g:airline_theme='monochrome'


" tagbar
nnoremap <leader>b :TagbarToggle<CR>

"ale
set path=.,/usr/include,/usr/include/x86_64-linux-gnu,,
let g:ale_linters = {'c': ['gcc']}
let g:ale_c_cc_executable = 'gcc'
"let g:ale_c_cc_options = '-std=c11 -Wall'
let g:ale_c_cc_options = '-std=gnu11 -Wall'

" base16
"colorscheme base16-google-dark
colorscheme base16-seti

" rainbow
let g:rainbow_active = 1

" indent guides
let g:indent_guides_enable_on_vim_startup = 1
"whichkey
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>

"nerdtree
"nnoremap <C-t> :NERDTreeToggle<CR>

"startify
"let g:startify_custom_header = readfile($"{getenv('HOME')}/.config/vim/startify-message.txt")

" bidirectional easymotion
" nnoremap <leader>w <plug>(easymotion-bd-w)

" clang complete
let g:clang_library_path='/usr/lib/llvm-19/lib/libclang-19.so.1'
"}}}


" TTY SETTINGS {{{
" are we in tty?
"if $TERM != 'linux' " this will fail when running tmux from tty
if !empty($DISPLAY)
	let g:airline_powerline_fonts = 1
	let g:base16colorspace=256
	set termguicolors
	let g:airline_theme='base16'
endif
"}}}

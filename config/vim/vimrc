"       _
"__   _(_)_ __ ___  _ __ ___
"\ \ / / | '_ ` _ \| '__/ __|
" \ V /| | | | | | | | | (__
"(_)_/ |_|_| |_| |_|_|  \___|
"
"
" ':normal zr' to unfold everything
" ':normal zm' to fold everything again
" ':normal za' to toggle one fold
"
"


" PLUGINS {{{
runtime ftplugin/man.vim
packadd termdebug

call plug#begin()
  Plug 'dense-analysis/ale'
  Plug 'chriskempson/base16-vim'
  Plug 'itchyny/lightline.vim'
  Plug 'cohama/lexima.vim' " modern auto-pairs
  Plug 'luochen1990/rainbow'
  Plug 'preservim/vim-indent-guides'
  Plug 'liuchengxu/vim-which-key'
  Plug 'preservim/tagbar'
  Plug 'mhinz/vim-signify'
  Plug 'tpope/vim-fugitive'
  Plug 'kovisoft/slimv' " https://susam.net/lisp-in-vim.html
  "Plug 'easymotion/vim-easymotion'
  "Plug 'ludovicchabant/vim-gutentags'
  "Plug 'maralla/completor.vim'
  "Plug 'lifepillar/vim-mucomplete'
  "Plug 'ervandew/supertab'
  "Plug 'xavierd/clang_complete'
  "Plug 'rhysd/vim-clang-format'
  "Plug 'preservim/nerdtree'
  "Plug 'mhinz/vim-startify'
call plug#end()
"}}}


" GENERAL CONFIGURATION OPTIONS {{{
set nocompatible " use Vim settings, ragher than Vi settings
set hidden " use hidden buffers
"set nohidden " this is the default value
set autoread " automatically re-read files if unmodified inside vim
set clipboard=unnamedplus
" Make the escape key more responsive by decreasing the wait time for an
" escape sequence (e.g., arrow keys).
set ttimeout
set ttimeoutlen=50
"set timeoutlen=500
set exrc " use local .vimrc files
filetype plugin on
"set directory="~/.vim/swap//"
"set backupdir="~/.vim/backup//"
"}}}


" USER INTERFACE OPTIONS {{{
set number " show line numbers on the sidebar
set relativenumber " set line numbers relative to the line of the cursor
set cursorline " highlight the line currently under the cursor
"set colorcolumn=80 " highlight 80th column
set wildmenu " display command line's tab autocomplete options as a menu
set noerrorbells " disable beep on errors
set visualbell " flash the screen instead of beeping on errors
set mouse=a

set splitright
set splitbelow
set laststatus=2
set noshowmode " since it is shown in lightline anyways
"set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
"}}}


" TEXT RENDERING OPTIONS {{{
set encoding=utf8
syntax on
set scrolloff=5
" set nowrap " don't wrap lines
set linebreak " wrap lines at convenient points
"set list
set listchars=tab:→\ ,trail:·,extends:…,precedes:…,nbsp:•
set listchars+=eol:¬,space:·
"
" cursor style
" Set cursor style (DECSCUSR), VT520.
"  0  blinking block.
"  1  blinking block (default).
"  2  steady block.
"  3  blinking underline.
"  4  steady underline.
"  5  blinking bar, xterm.
"  6  steady bar, xterm
let &t_EI = "\e[2 q"  " Set cursor to a block in normal mode
let &t_SI = "\e[6 q"  " Set cursor to a vertical bar in insert mode

" rainbow plugin
let g:rainbow_active = 1

"ale plugin
set path=.,/usr/include,/usr/include/x86_64-linux-gnu,,
let g:ale_linters = {'c': ['gcc']}
let g:ale_c_cc_executable = 'gcc'
"let g:ale_c_cc_options = '-std=c11 -Wall'
let g:ale_c_cc_options = '-std=gnu11 -Wall'
"}}}


" COLORS {{{
function SetLightTheme()
  set background=light
  colorscheme base16-atelier-dune-light
  let g:lightline = {'colorscheme': 'Tomorrow'}
  endfunction

function SetDarkTheme()
  set background=dark
  colorscheme base16-tomorrow-night-eighties
  let g:lightline = {'colorscheme': 'Tomorrow_Night_Eighties'}
endfunction

function ToggleTheme()
  if &background ==# 'dark'
    call SetLightTheme()
  else
    call SetDarkTheme()
  endif
  " force lightline to reload
  call lightline#disable()
  call lightline#enable()
endfunction


" are we in tty?
"if $TERM != 'linux' " this will fail when running tmux from tty
if !empty($DISPLAY)
  set termguicolors
  call SetDarkTheme()
  "call SetLightTheme()
else
  colorscheme slate
endif
"}}}


" INDENTATION OPTIONS {{{
" see :h tabstop
filetype plugin indent on " enable indenting depending on file type
set autoindent " enable autoindenting
"set tabstop=8
"set softtabstop=4
"set shiftwidth=4
"set smarttab
"https://stackoverflow.com/questions/158968/changing-vim-indentation-behavior-by-file-type
augroup custom_indentation
  " :help autocmd-groups
  autocmd!
  autocmd Filetype vim setlocal shiftwidth=2 softtabstop=2 expandtab
\    foldmethod=marker "nofoldenable
  autocmd Filetype c setlocal shiftwidth=4 tabstop=4 noexpandtab
  autocmd Filetype python setlocal sw=4 sts=4 et
  autocmd Filetype javascript setlocal sw=2 ts=2 noet
augroup END
"}}}


" SEARCH OPTIONS {{{
set hlsearch
set incsearch
set ignorecase " ignore case when searchihng...
set smartcase " ...unless you type a capital
" This will look in the current directory for 'tags', and work up the tree
" towards root until one is found.
" From: http://stackoverflow.com/questions/563616/vim-and-ctags-tips-and-tricks
set tags=tags;/
"}}}


" REMAPPINGS {{{
nnoremap ; :
nnoremap : ;
" scroll down
nnoremap <down> <C-e>
" scroll up
nnoremap <up> <C-y>

" Yank to end of line
noremap Y y$

" leader
nnoremap <space> <nop>
let g:mapleader = "\<space>"
let g:maplocalleader = "\<space>"
" double tap esc to enter normal mode (inside terminal mode)
tnoremap <Esc><Esc> <C-\><C-N>
" open terminal in current window
"noremap <leader>T :ter ++curwin<CR>
" open terminal in new window
" noremap <leader>t :ter<CR>
" open terminal in new tab
noremap <leader>T :tab ter<CR>
" :ter to open new terminal in split window
" reload vim configuration
nnoremap <silent> <leader>. :so $MYVIMRC\|nohls\|call lightline#disable()\|call lightline#enable()<cr>
function ToggleColorcolumn()
  if &colorcolumn ==# ""
    "set colorcolumn=80
    set colorcolumn=80,100,120
  else
    set colorcolumn=""
  endif
endfunction
nnoremap <silent> <Leader>, :IndentGuidesToggle\|set list!\|call ToggleColorcolumn()<cr>
" clear search
nnoremap <silent> <leader>/ :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
" windows
"nnoremap <leader>s <C-w>n
"nnoremap <leader>v :vnew<cr>
nnoremap <leader>s <C-w>s
nnoremap <leader>v <C-w>v
nnoremap <leader>h <C-w>h
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l
nnoremap <leader>H <C-w>H
nnoremap <leader>J <C-w>J
nnoremap <leader>K <C-w>K
nnoremap <leader>L <C-w>L

" tabs
"noremap <leader>t :tabnew<CR>
noremap <leader>t :tabe<CR>
" gt - go to next tab
nnoremap <leader>n gt
" gT - go to previous tab
nnoremap <leader>p gT
" gf - go to file under the cursor
" <C-w>gf - go to file under the cursor in a new tab

" tagbar plugin
nnoremap <leader>b :TagbarOpen jf<CR>

" whichkey plugin
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>

" see COLORS section
nnoremap <leader>c :call ToggleTheme()<cr>
"}}}


" PLUGIN SETTINGS {{{
" clang complete
"let g:clang_library_path='/usr/lib/llvm-19/lib/libclang-19.so.1'
"}}}


" WORKAROUND TO MAKE SYSTEM CLIPBOARD WORK IN WAYLAND {{{
"https://github.com/vim/vim/issues/5157
if $XDG_SESSION_TYPE=='wayland'
  augroup wl-clipboard
  " :help autocmd-groups
    autocmd!
    autocmd FocusLost * :call system('wl-copy --trim-newline', @+)
    autocmd FocusGained * :let @+ = system('wl-paste -n')
  augroup END
endif

"}}}

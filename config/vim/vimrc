"       _
"__   _(_)_ __ ___  _ __ ___
"\ \ / / | '_ ` _ \| '__/ __|
" \ V /| | | | | | | | | (__
"(_)_/ |_|_| |_| |_|_|  \___|
"
"
" ':normal zr' unfold one level (reduce folding)
" ':normal zR' unfold everything
" ':normal zm' fold one more level (fold more)
" ':normal zM' fold everything
" ':normal za' toggle one fold
"
"


" options {{{
if !has('nvim')
  set nocompatible
  syntax on
  set autoindent autoread encoding=utf8 hidden hlsearch incsearch laststatus=2
    \ mouse=nv noerrorbells ttimeout ttimeoutlen=50 wildmenu wildoptions=pum,tagfile

  if !empty($DISPLAY)
    set termguicolors
  endif
  " see: XTerm Control Sequences (DECSCUSR)
  let &t_EI = "\e[2 q" " set cursor to a block in normal mode
  let &t_SI = "\e[6 q" " set cursor to a vertical bar in insert mode
endif
filetype plugin indent on
colorscheme slate
set clipboard=unnamedplus cursorline ignorecase linebreak nowrap number
  \ relativenumber scrolloff=5 showmode smartcase splitbelow splitright
  \ updatetime=500 visualbell
  \ listchars=tab:→\ ,trail:·,extends:…,precedes:…,nbsp:•,eol:¬,space:·
  \ statusline=[%F]\ %m%r%h%w%=[%{&ff}/%Y]\ [line\ %l\/%L,\ col\ %c]
"}}}


" key-mapping {{{
" swap ; and : behavior in normal mode
nn ; :
nn : ;

if !has('nvim')
  nn Y y$
  nn <C-L> <Cmd>nohlsearch<Bar>diffupdate<Bar>normal! <C-L><CR>
end

" leader
nn <space> <nop>
let g:mapleader = "\<space>"
let g:maplocalleader = "\<space>"

" open help for word under the cursor
nn <leader>h :h <c-r><c-w><cr>
nn <leader>H yiW:h <c-r>"<cr>

" from terminal insert mode to terminal normal mode
tnoremap <C-n> <C-\><C-n>

" reload vim configuration
nm <silent> <leader>. :so $MYVIMRC<CR>:normal <C-L><CR>

function ToggleColorcolumn()
  if &colorcolumn ==# ""
    set colorcolumn=80,100,120
  else
    set colorcolumn=""
  endif
endfunction
nn <silent> <Leader>, :IndentGuidesToggle\|set list!\|call ToggleColorcolumn()<cr>

" clear search
if !has('nvim')
  nn <silent> <leader>/ :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
end

" autopair curly brackets
ino {<cr> {}<left><cr><up><esc>o

" autopair for jinja templates
ino {% {%%}<left><left>

" fold everything but selection
"https://stackoverflow.com/questions/674613/vim-folds-for-everything-except-something
vn <Leader>za <Esc>`<kzfgg`>jzfG`<

" scroll up and down
nn <down> <C-e><down>
nn <up> <C-y><up>
nn <A-j> <C-e>
nn <A-k> <C-y>
"}}}


" language dependent options {{{
augroup custom_indentation
  autocmd!
  autocmd Filetype vim setlocal sw=2 sts=2 et fdm=marker
  autocmd Filetype c setlocal sw=4 ts=4 noet
  autocmd Filetype python setlocal sw=4 sts=4 et
  autocmd Filetype javascript\|java\|lua setlocal sw=2 ts=2 noet
augroup END
"}}}


" project dependent options {{{
set exrc " use local .vimrc files
let g:c_syntax_for_h = 1 " this should be adjusted depending on the project: c -> 1, cpp -> 0
"}}}


" plugins {{{
if !has('nvim')
  runtime ftplugin/man.vim
  packadd termdebug
endif

call plug#begin()
  if !has('nvim')
    Plug 'jasonccox/vim-wayland-clipboard' " integrates wayland clipboard
    Plug 'sheerun/vim-polyglot' " a collection of language packs for vim
    Plug 'rhysd/vim-healthcheck' " instead of Neovim's standard :checkhealth command, it provides :CheckHealth command on vim
    " lsp
    Plug 'prabirshrestha/vim-lsp'
    Plug 'mattn/vim-lsp-settings' " lsp autoconfiguration
    Plug 'prabirshrestha/asyncomplete.vim' " lsp autocompletion dependency
    Plug 'prabirshrestha/asyncomplete-lsp.vim' " lsp autocompletion
  else
    Plug 'neovim/nvim-lspconfig' " quickstart configs for Nvim LSP
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  endif
  Plug 'preservim/tagbar'
  Plug 'preservim/nerdtree'
  Plug 'vimwiki/vimwiki' " a personal wiki for vim
  Plug 'luochen1990/rainbow' " rainbow parentheses improved
  Plug 'preservim/vim-indent-guides' " visually display indent levels
  Plug 'tpope/vim-fugitive' " a git plugin so awesome it should be illegal
  Plug 'mhinz/vim-signify' " show differences with style
  " some interesting plugins I'm currently not using
  "Plug 'lepture/vim-jinja' " jinja templates plugin
  "Plug 'meatballs/vim-xonsh' " xonsh python-based shell plugin
  "Plug 'itchyny/lightline.vim'
  "Plug 'dense-analysis/ale'
call plug#end()

"fugitive plugin
set statusline=[%F]\ %(%m%r%h%w\ %)%{FugitiveStatusline()}%=[%{&ff}/%Y]\ [line\ %l\/%L,\ col\ %c]
" rainbow plugin
let g:rainbow_active = 1
" tagbar plugin
let g:tagbar_width = max([25, winwidth(0) / 5])
let g:tagbar_map_showproto="<space><space>"
nnoremap <leader>t :TagbarToggle jf<cr>
nnoremap <leader>b :TagbarToggle jf<cr>
" nertree plugin
nnoremap <leader>n :NERDTreeToggle<cr>
"}}}


" lsp configuration {{{
if !has('nvim')
  " lsp plugin
  let g:lsp_diagnostics_float_insert_mode_enabled = 0
  let g:lsp_diagnostics_highlights_insert_mode_enabled = 0
  let g:lsp_diagnostics_signs_insert_mode_enabled = 0

  nmap gd <plug>(lsp-definition)
  nmap gs <plug>(lsp-document-symbol-search)
  nmap gS <plug>(lsp-workspace-symbol-search)
  nmap gr <plug>(lsp-references)
  nmap gi <plug>(lsp-implementation)
  nmap gt <plug>(lsp-type-definition)
  "nmap <leader>rn <plug>(lsp-rename)
  "nmap [g <plug>(lsp-previous-diagnostic)
  "nmap ]g <plug>(lsp-next-diagnostic)
  nmap K <plug>(lsp-hover)
  "nnoremap <expr><c-f> lsp#scroll(+4)
  "nnoremap <expr><c-d> lsp#scroll(-4)

  " register ccls C/C++ lanuage server
  if executable('ccls')
     au User lsp_setup call lsp#register_server({
        \ 'name': 'ccls',
        \ 'cmd': {server_info->['ccls']},
        \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
        \ 'initialization_options': {'cache': {'directory': expand('~/.cache/ccls') }},
        \ 'allowlist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
        \ })
  endif
  " use ccls instead of clangd
  let g:lsp_settings = {
        \ 'clangd': {'disabled': 1}
  \}

elseif has('nvim')
  "call v:lua.vim.lsp.enable('ccls')
  call v:lua.vim.lsp.enable('clangd')
  call v:lua.vim.lsp.enable('pyright')
endif
"}}}



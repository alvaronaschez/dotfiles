"       _
"__   _(_)_ __ ___  _ __ ___
"\ \ / / | '_ ` _ \| '__/ __|
" \ V /| | | | | | | | | (__
"(_)_/ |_|_| |_| |_|_|  \___|
"
"
" ':normal zr' to unfold everything
" ':normal zm' to fold everything again
" ':normal za' to toggle one fold
"
"


" GENERAL CONFIGURATION OPTIONS {{{

if !has('nvim')
  set nocompatible " use Vim settings, rather than Vi settings
  set hidden " use hidden buffers
  set autoread " automatically re-read files if unmodified inside vim
  set ttimeout
  set ttimeoutlen=50
  " Make the escape key more responsive by decreasing the wait time for an
  " escape sequence (e.g., arrow keys).
endif
set clipboard=unnamedplus
set exrc " use local .vimrc files
filetype plugin on
"set directory="~/.vim/swap//"
"set backupdir="~/.vim/backup//"
set updatetime=500
"}}}


" USER INTERFACE OPTIONS {{{
if !has('nvim')
  set wildmenu " display command line's tab autocomplete options as a menu
  set wildoptions=pum,tagfile " display the completion matches using the popup menu
  set noerrorbells " disable beep on errors
  set laststatus=2
  set mouse=nv " mouse available in normal and visual modes
endif
set number " show line numbers on the sidebar
set relativenumber " set line numbers relative to the line of the cursor
set cursorline " highlight the line currently under the cursor
set visualbell " flash the screen instead of beeping on errors
set splitright " split windows right when :vsplit
set splitbelow " split windows below when :split
set noshowmode " since it is shown in lightline anyways
"set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
"}}}


" TEXT RENDERING OPTIONS {{{
if !has('nvim')
  set encoding=utf8
  syntax on
  " cursor style
  " Set cursor style (DECSCUSR), VT520.
  "  0  blinking block.
  "  1  blinking block (default).
  "  2  steady block.
  "  3  blinking underline.
  "  4  steady underline.
  "  5  blinking bar, xterm.
  "  6  steady bar, xterm
  let &t_EI = "\e[2 q"  " Set cursor to a block in normal mode
  let &t_SI = "\e[6 q"  " Set cursor to a vertical bar in insert mode
endif
set scrolloff=5
set nowrap " don't wrap lines
set linebreak " wrap lines at convenient points
"set list
set listchars=tab:â†’\ ,trail:Â·,extends:â€¦,precedes:â€¦,nbsp:â€¢
set listchars+=eol:Â¬,space:Â·
"}}}


" COLORS {{{
colorscheme slate
if !has('nvim') && !empty($DISPLAY)
  " we dont want to enable termguicolors if we are in tty
  " it is enabled by default in nvim
  set termguicolors
endif
"}}}


" INDENTATION OPTIONS {{{
if !has('nvim')
  set autoindent " enable autoindenting
endif
" see :h tabstop
"https://stackoverflow.com/questions/158968/changing-vim-indentation-behavior-by-file-type
augroup custom_indentation
  " :help autocmd-groups
  autocmd!
  autocmd Filetype vim setlocal shiftwidth=2 softtabstop=2 expandtab
\    foldmethod=marker "nofoldenable
  autocmd Filetype c setlocal shiftwidth=4 tabstop=4 noexpandtab
  autocmd Filetype python setlocal sw=4 sts=4 et
  autocmd Filetype javascript setlocal sw=2 ts=2 noet
  autocmd Filetype java setlocal sw=2 ts=2 noet
  autocmd Filetype lua setlocal sw=2 ts=2 noet
augroup END
"}}}


" SEARCH OPTIONS {{{
if !has('nvim')
  set hlsearch
  set incsearch
endif
set ignorecase " ignore case when searchihng...
set smartcase " ...unless you type a capital
" This will look in the current directory for 'tags', and work up the tree
" towards root until one is found.
" From: http://stackoverflow.com/questions/563616/vim-and-ctags-tips-and-tricks
set tags=tags;/
"}}}


" REMAPPINGS {{{
nnoremap ; :
nnoremap : ;

" scroll up and down
nnoremap <down> <C-e><down>
nnoremap <up> <C-y><up>
nnoremap <A-down> <C-e>
nnoremap <A-up> <C-y>

" Yank to end of line
noremap Y y$

" leader
nnoremap <space> <nop>
let g:mapleader = "\<space>"
let g:maplocalleader = "\<space>"
" double tap esc to enter normal mode (inside terminal mode)
tnoremap <Esc><Esc> <C-\><C-N>

noremap <leader>T :tab ter<CR>
" :ter to open new terminal in split window
" reload vim configuration
nnoremap <silent> <leader>. :so $MYVIMRC\|nohls\|call lightline#disable()\|call lightline#enable()<cr>
function ToggleColorcolumn()
  if &colorcolumn ==# ""
    "set colorcolumn=80
    set colorcolumn=80,100,120
  else
    set colorcolumn=""
  endif
endfunction
nnoremap <silent> <Leader>, :IndentGuidesToggle\|set list!\|call ToggleColorcolumn()<cr>
" clear search
nnoremap <silent> <leader>/ :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

inoremap {<cr> {}<left><cr><up><esc>o

inoremap {% {%%}<left><left>
"}}}


" PLUGINS {{{
runtime ftplugin/man.vim
if !has('nvim')
  packadd termdebug
endif

call plug#begin()
  if !has('nvim')
    Plug 'jasonccox/vim-wayland-clipboard' " integrates wayland clipboard
  endif
  "Plug 'dense-analysis/ale'
  Plug 'itchyny/lightline.vim'
  "Plug 'cohama/lexima.vim' " modern auto-pairs
  Plug 'luochen1990/rainbow'
  Plug 'preservim/vim-indent-guides'
  Plug 'preservim/tagbar'
  Plug 'preservim/nerdtree'
  Plug 'mhinz/vim-signify'
  Plug 'tpope/vim-fugitive'
  Plug 'vimwiki/vimwiki'
  Plug 'sheerun/vim-polyglot'
  Plug 'lepture/vim-jinja'
  Plug 'meatballs/vim-xonsh'
  " lsp
  Plug 'prabirshrestha/vim-lsp'
  Plug 'mattn/vim-lsp-settings'
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
call plug#end()

" rainbow plugin
let g:rainbow_active = 1

" lightline plugin
let g:lightline = {'colorscheme':'wombat','active':{'left':[[ 'mode','paste'],['readonly', 'absolutepath','modified']],}}
"let g:lightline = {
"      \ 'colorscheme': 'wombat',
"      \ 'active': {
"      \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'absolutepath', 'modified' ] ],
"      \ }
"      \ }

" tagbar plugin
"let g:tagbar_width = max([25, winwidth(0) / 5])
"autocmd FileType vim,c,cpp,java,python nested :TagbarOpen
let g:tagbar_width = 25

"https://stackoverflow.com/questions/35330381/getting-alt-to-work-in-the-terminal-with-tmux-and-vim
"https://github.com/tmux/tmux/wiki/Modifier-Keys
"https://vim.fandom.com/wiki/Get_Alt_key_to_work_in_terminal
":h tmux-integration
if !has('gui_running') && &term =~ '^\%(screen\|tmux\)'
  "where  is inserted in Vim by pressing <C-v><Esc>	
  nnoremap b :TagbarToggle jf<cr>
else
  nnoremap <A-b> :TagbarToggle jf<cr>
endif

" nertree plugin
if !has('gui_running') && &term =~ '^\%(screen\|tmux\)'
  nnoremap n :NERDTreeToggle<cr>
else
  nnoremap <A-n> :NERDTreeToggle<cr>
endif

" lsp plugin
let g:lsp_diagnostics_float_insert_mode_enabled = 0
let g:lsp_diagnostics_highlights_insert_mode_enabled = 0
let g:lsp_diagnostics_signs_insert_mode_enabled = 0

nmap <buffer> gd <plug>(lsp-definition)
nmap <buffer> gs <plug>(lsp-document-symbol-search)
nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
nmap <buffer> gr <plug>(lsp-references)
nmap <buffer> gi <plug>(lsp-implementation)
nmap <buffer> gt <plug>(lsp-type-definition)
"nmap <buffer> <leader>rn <plug>(lsp-rename)
"nmap <buffer> [g <plug>(lsp-previous-diagnostic)
"nmap <buffer> ]g <plug>(lsp-next-diagnostic)
nmap <buffer> K <plug>(lsp-hover)
"nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
"nnoremap <buffer> <expr><c-d> lsp#scroll(-4)


"ale plugin
"let g:ale_enabled = 0
"let g:ale_lint_on_text_changed = 0
"let g:ale_lint_on_insert_leave = 0
"imap <C-c> <Plug>(ale_complete)
""let g:ale_c_cc_executable = 'gcc'
""let g:ale_c_cc_executable = 'clang'
"                    \ 'java':['javac', 'eclipselsp'],
"let g:ale_linters = {
"                    \ 'c': ['ccls'],
"                    \ 'cpp': ['ccls'],
"                    \ 'java':['eclipselsp'],
"                    \ 'python':['ruff', 'pylsp']
"                    \}
"let g:ale_fixers = {
"\   '*': ['remove_trailing_lines', 'trim_whitespace'],
""\   'javascript': ['eslint'],
"\}
"
"let g:c_syntax_for_h = 1 " this should be adjusted depending on the project
"let g:ale_c_cc_use_header_exts = ['h'] " this should be adjusted depending on the project

"}}}



"rToggle
" 
" general configuration options
"
set nocompatible " use Vim settings, ragher than Vi settings
set hidden " use hidden buffers
"set nohidden " this is the default value
set autoread " automatically re-read files if unmodified inside vim
set clipboard=unnamedplus
" Make the escape key more responsive by decreasing the wait time for an
" escape sequence (e.g., arrow keys).
set ttimeout
set ttimeoutlen=50
"set timeoutlen=500
set exrc " use local .vimrc files
filetype plugin on

"
" user interface options
"
"colorscheme desert
set number " show line numbers on the sidebar
set relativenumber " set line numbers relative to the line of the cursor
set cursorline " highlight the line currently under the cursor
set colorcolumn=80 " highlight 80th column
set wildmenu " display command line's tab autocomplete options as a menu
set noerrorbells " disable beep on errors
set visualbell " flash the screen instead of beeping on errors
set mouse=a
set background=dark " use colors that suit a dark background

set splitright
set splitbelow

"
" text rendering options
"
set encoding=utf8
syntax on
set scrolloff=5
" set nowrap " don't wrap lines
set linebreak " wrap lines at convenient points
set list
set listchars=tab:→\ ,trail:·,extends:…,precedes:…,nbsp:•
set listchars+=eol:¬,space:·
"
" cursor style
" Set cursor style (DECSCUSR), VT520.
" 	0  ⇒  blinking block.
" 	1  ⇒  blinking block (default).
" 	2  ⇒  steady block.
" 	3  ⇒  blinking underline.
" 	4  ⇒  steady underline.
" 	5  ⇒  blinking bar, xterm.
" 	6  ⇒  steady bar, xterm
let &t_EI = "\e[2 q"  " Set cursor to a block in normal mode
let &t_SI = "\e[6 q"  " Set cursor to a vertical bar in insert mode


"
" indentation options
" see :h tabstop
"
filetype plugin indent on " enable indenting depending on file type
set autoindent " enable autoindenting
"set tabstop=8
"set softtabstop=4
"set shiftwidth=4
"set smarttab
"https://stackoverflow.com/questions/158968/changing-vim-indentation-behavior-by-file-type
augroup custom_indentation
	autocmd!
	"autocmd Filetype c,vim setlocal shiftwidth=4 tabstop=4 noexpandtab
	autocmd Filetype vim setlocal shiftwidth=4 tabstop=4 noexpandtab
	autocmd Filetype c setlocal shiftwidth=4 tabstop=4 noexpandtab
	autocmd Filetype python setlocal shiftwidth=4 softtabstop=4 expandtab
	autocmd Filetype javascript setlocal ts=2 sw=2 noet
	"autocmd Filetype c,java set cindent noexpandtab
	"autocmd BufRead,BufNewFile   *.c,*.h,*.java set cindent noexpandtab
	"autocmd BufRead,BufNewFile   *.pl syntax on
augroup END

"
" search options
"
set hlsearch
set incsearch
set ignorecase " ignore case when searchihng...
set smartcase " ...unless you type a capital


"
" misc options
"
set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\

" This will look in the current directory for 'tags', and work up the tree
" towards root until one is found.
" From: http://stackoverflow.com/questions/563616/vim-and-ctags-tips-and-tricks
set tags=tags;/


"
" remappings
"
nnoremap ; :
nnoremap : ;
nnoremap <down> <C-e>
nnoremap <up> <C-y>

" Yank to end of line
noremap Y y$

" leader
nnoremap <space> <nop>
let mapleader = "\<space>"
let maplocalleader = "\<space>"
" quit
nnoremap <leader>qq :q<CR>
"nnoremap <leader>q :q<CR>
" quick help
nnoremap <leader>? :tab :h quickref<CR>
" terminal mode
" double tap esc to enter normal mode (inside terminal mode)
tnoremap <Esc><Esc> <C-\><C-N>
" open terminal in current window
noremap <leader>t :ter ++curwin<CR>
" open terminal in new window
" noremap <leader>t :ter<CR>
" open terminal in new tab
" noremap <leader>T :tab ter<CR>
" :ter to open new terminal in split window
" reload vim configuration
nnoremap <silent> <Leader>r :so $MYVIMRC<CR> :nohls<cr><left>
" clear search
nnoremap <silent> <leader>/ :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
" windows
nnoremap <leader>s :new<cr>
nnoremap <leader>v :vnew<cr>
nnoremap <leader>h <C-w>h
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l
" tabs
" gt - go to next tab
" gT - go to previous tab
noremap <leader>T :tabnew<CR>
nnoremap <leader>n gt
nnoremap <leader>p gT
" gf - go to file under the cursor
" <C-w>gf - go to file under the cursor in a new tab


" workaround to make system clipboard work in wayland
"https://github.com/vim/vim/issues/5157
if $XDG_SESSION_TYPE=='wayland'
	augroup wl-clipboard
		autocmd!
		autocmd FocusLost * :call system('wl-copy --trim-newline', @+)
		autocmd FocusGained * :let @+ = system('wl-paste -n')
	augroup END
endif


"
" plugins
"
runtime ftplugin/man.vim

call plug#begin()

Plug 'chriskempson/base16-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'preservim/tagbar'
Plug 'liuchengxu/vim-which-key'
Plug 'dense-analysis/ale'
Plug 'jiangmiao/auto-pairs'
Plug 'luochen1990/rainbow'
Plug 'preservim/vim-indent-guides'
Plug 'mhinz/vim-signify'
Plug 'ludovicchabant/vim-gutentags'
Plug 'easymotion/vim-easymotion'
Plug 'rhysd/vim-clang-format'
Plug 'mhinz/vim-startify'
"Plug 'preservim/nerdtree'

"Plug 'maralla/completor.vim'
"Plug 'ervandew/supertab'

call plug#end()

"let g:deoplete#enable_at_startup = 1

"let g:ale_c_parse_makefile = 1
"let g:ale_linters = {'c': ['gcc']}

" airline
let g:airline_theme='monochrome'

" are we in tty?
"if $TERM != 'linux' " this will fail when running tmux from tty
if !empty($DISPLAY)
	let g:airline_powerline_fonts = 1
	let base16colorspace=256
	set termguicolors
	let g:airline_theme='base16'
endif


" tagbar
nnoremap <leader>b :TagbarToggle<CR>

"ale
set path=.,/usr/include,/usr/include/x86_64-linux-gnu,,
let g:ale_linters = {'c': ['gcc']}
let g:ale_c_cc_executable = 'gcc'
"let g:ale_c_cc_options = '-std=c11 -Wall'
let g:ale_c_cc_options = '-std=gnu11 -Wall'

" nnoremap <leader>1 :colorscheme base16-google-dark<cr>
" nnoremap <leader>2 :colorscheme base16-seti<cr>
" nnoremap <leader>3 :colorscheme base16-default-dark<cr>
" nnoremap <leader>4 :colorscheme base16-irblack<cr>
" nnoremap <leader>5 :colorscheme base16-darktooth<cr>
" nnoremap <leader>6 :colorscheme desert<cr>

"colorscheme - run after loading base16 plugin
"colorscheme base16-google-dark
colorscheme base16-seti

" rainbow
let g:rainbow_active = 1

"nerdtree
"nnoremap <C-t> :NERDTreeToggle<CR>

"startify
let g:startify_custom_header = readfile($"{getenv('HOME')}/.config/vim/startify-message.txt")

"whichkey
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>

" bidirectional easymotion
" nnoremap <leader>w <plug>(easymotion-bd-w)

" indent guides
let g:indent_guides_enable_on_vim_startup = 1
